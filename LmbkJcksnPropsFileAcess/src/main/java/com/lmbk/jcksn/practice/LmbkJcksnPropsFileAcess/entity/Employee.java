package com.lmbk.jcksn.practice.LmbkJcksnPropsFileAcess.entity;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonSetter;
import lombok.Data;

@Data
@JsonPropertyOrder({"employeeName", "address", "empCode", "salary", "Total_Pf"})
@JsonInclude(JsonInclude.Include.NON_NULL) // Null will not get included while serialization
@JsonIgnoreProperties(ignoreUnknown = true)
/*
This annotation allows you to specify properties that should be ignored
if they are present in the JSON (deserialization) data but do not have corresponding fields in the Java class
*/
public class Employee {

  @JsonIgnore // Excludes the field secretInfo from serialization and deserialization
  private int id;
  private String employeeName;
  private String address;
  private Double salary;
  private char empCode;

  @JsonProperty("Total_Pf")
  private Double totalPf;
  /*
  In this example, @JsonSetter("fullAddress") is used to specify that the setter method setAddress should
   be used to set the value of the "fullAddress" property during deserialization instead of the
   default setter method generated by Jackson.
    */
  @JsonSetter("fullAddress")
  public void setAddress(String address) {
    this.address = address;
  }

  public Double getTotalPf() {
    return (salary * 10) / 100;
  }

  //    public Double getSalary() {
  //        return null;
  //    }

  @Override
  public String toString() {
    return "Employee{"
        + "id="
        + id
        + ", employeeName='"
        + employeeName
        + '\''
        + ", address='"
        + address
        + '\''
        + ", salary="
        + salary
        + ", empCode="
        + empCode
        + ", totalPf="
        + totalPf
        + '}';
  }
}
